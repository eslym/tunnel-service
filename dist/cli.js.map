{"version":3,"sources":["../src/cli.ts"],"names":[],"mappings":"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","file":"cli.js","sourcesContent":["#!/usr/bin/node\n\nimport * as yargs from \"yargs\";\nimport {ArgumentsCamelCase, Argv} from \"yargs\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\nimport {LaunchOption, TunnelService} from \"./service\";\nimport {DefaultAgentPool, FileUserProvider, TextPlainErrorResponseHandler} from \"./builtins\";\nimport {selectLessRequest, selectRandomly} from \"./utils\";\n\ninterface CliOptions {\n    http: number,\n    ssh: number,\n    key: string,\n    auth: string,\n    proxy: string,\n    timeout: number,\n    balancing: string,\n}\n\n// This is the only way to keep multiple instance of yargs for different purpose\n(new (yargs as any)() as Argv).command('$0', 'Start a tunnel server', (cmd)=>{\n    cmd.option('httpPort', {\n        describe: 'The port of the HTTP reverse proxy listening',\n        alias: ['H', 'http'],\n        type: 'number',\n    }).option('sshPort', {\n        describe: 'The port of the SSH service listening',\n        alias: ['s', 'ssh'],\n        type: 'number',\n    }).option('key', {\n        describe: 'Path to the ssh server key',\n        alias: ['k'],\n        type: 'string',\n    }).option('auth', {\n        describe: 'Path to the user configuration folder',\n        alias: ['a'],\n        type: 'string',\n    }).option('trustedProxy', {\n        describe: 'The reverse proxy in-front of this proxy',\n        alias: ['p', 'proxy'],\n        type: 'string',\n        default: '127.0.0.1/8',\n    }).option('proxyTimeout', {\n        describe: 'The timeout of proxy request, in milliseconds',\n        alias: ['t', 'timeout'],\n        type: 'number',\n        default: 30000,\n    }).option('balancing', {\n        describe: 'The load-balancing method, \"requests\" for request count, \"random\" for random.',\n        alias: ['b', 'balance', 'lb', 'loadBalancing'],\n        type: \"string\",\n        default: 'requests',\n    })\n        .demandOption(['key', 'auth'])\n        .default('httpPort', 0)\n        .default('sshPort', 0);\n}, (args: ArgumentsCamelCase<CliOptions>)=>{\n    if(!fs.existsSync(args.key)){\n        console.error(`SSH Server key not exists: ${args.key}`);\n        return;\n    }\n    if(!fs.existsSync(args.auth)){\n        console.error(`User configuration folder not exists: ${args.key}`);\n        return;\n    }\n    let options: LaunchOption = {\n        sshPort: args.ssh,\n        httpPort: args.http,\n        serverKey: fs.readFileSync(args.key),\n        agentPool: new DefaultAgentPool(args.balancing === 'requests' ? selectLessRequest : selectRandomly),\n        userProvider: new FileUserProvider(args.auth),\n        errorResHandler: new TextPlainErrorResponseHandler(),\n        proxyTimeout: args.timeout,\n        trustedProxy: args.proxy,\n    };\n    let service = new TunnelService(options);\n    service.start();\n}, [(argv: ArgumentsCamelCase<CliOptions>)=>{\n    argv.key = path.resolve(argv.key);\n    argv.auth = path.resolve(argv.auth);\n}]).parse(process.argv);\n"]}