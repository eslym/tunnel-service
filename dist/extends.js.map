{"version":3,"sources":["../src/extends.ts"],"names":[],"mappings":"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","file":"extends.js","sourcesContent":["import {Contracts} from \"./contracts\";\nimport {randomUUID} from \"crypto\";\nimport {Connection} from \"ssh2\";\nimport {Console} from 'console';\nimport {Agent} from \"http\";\nimport {HttpAgent, HttpsAgent} from \"./agents\";\nimport Protocol = Contracts.Protocol;\n\ninterface PrivateProperties {\n    uuid: string,\n    bindings: Map<string, AgentProvider>,\n    user?: Contracts.User,\n    logging: boolean,\n    mainIO?: Console,\n    pendingLogs: string[],\n    weight: number,\n}\n\nconst privates = new WeakMap<Connection | TraitConnection, PrivateProperties>();\n\nexport type ClientConnection = Connection & TraitConnection;\n\nclass AgentProvider implements Contracts.AgentProvider {\n    activeRequests: number;\n    readonly binding: string;\n    readonly client: ClientConnection;\n    readonly protocol: Contracts.Protocol;\n    readonly uuid: string;\n    private _weight?: number;\n\n    get weight(): number{\n        if(this.hasOwnProperty('_weight')){\n            return this._weight;\n        }\n        return this.client.weight;\n    }\n\n    set weight(weight: number){\n        if(!Number.isNaN(weight) && Number.isFinite(weight) && weight > 0){\n            this._weight = weight;\n        } else {\n            delete this._weight;\n        }\n    }\n\n    get port(): number{\n        return this.protocol === 'http' ? 80 : 443;\n    }\n\n    getAgent(sourceIp: string, sourcePort: number): Promise<Agent> {\n        return new Promise<Agent>((res, rej)=>{\n            this.client.forwardOut(this.binding, this.port, sourceIp, sourcePort, (err, ch)=>{\n                if(err){\n                    return rej(err);\n                }\n                let claz = this.protocol === 'http' ? HttpAgent : HttpsAgent;\n                res(new claz(ch, this.client, this, {}));\n            });\n        });\n    }\n}\n\nabstract class TraitConnection implements Contracts.ClientConnection {\n    get uuid(): string{\n        return privates.get(this).uuid;\n    }\n\n    get agents(): Contracts.AgentProvider[] {\n        return Array.from(privates.get(this).bindings.values());\n    }\n\n    get user(): Contracts.User {\n        return privates.get(this).user;\n    }\n\n    get bindings(): Map<string, AgentProvider> {\n        return privates.get(this).bindings;\n    }\n\n    get console(): Console {\n        return privates.get(this).mainIO;\n    }\n\n    set console(console: Console){\n        let props = privates.get(this);\n        props.mainIO = console;\n        while (props.pendingLogs.length){\n            console.log(props.pendingLogs.shift());\n        }\n    }\n\n    get weight(){\n        return privates.get(this).weight;\n    }\n\n    set weight(weight: number){\n        privates.get(this).weight = weight;\n    }\n\n    async log(message: string, force?: boolean): Promise<void> {\n        let props = privates.get(this);\n        if(this.console){\n            if(force || props.logging){\n                this.console.log(message);\n            }\n        } else {\n            if(force || props.logging){\n                props.pendingLogs.push(message);\n            }\n        }\n    }\n\n    setLogging(enable: boolean){\n        privates.get(this).logging = enable;\n    }\n\n    isBound(domain: string, protocol: Contracts.Protocol): boolean {\n        return !this.bindings.hasOwnProperty(domain) ? false :\n            this.bindings[domain].protocol === protocol;\n    }\n\n    setUser(user: Contracts.User): this{\n        privates.get(this).user = user;\n        return this;\n    }\n\n    createAgentProvider(binding: string, protocol: Protocol): AgentProvider{\n        return Object.assign(Object.create(AgentProvider.prototype), {\n            uuid: randomUUID(),\n            client: this,\n            binding, protocol,\n            activeRequests: 0,\n        });\n    }\n}\n\nexport function extendClient(client: Connection): ClientConnection {\n    let proto = Object.create(Object.getPrototypeOf(client));\n    privates.set(client, {\n        uuid: randomUUID(),\n        bindings: new Map<string, AgentProvider>(),\n        logging: false,\n        weight: 0,\n        pendingLogs: [],\n    });\n    let descriptors = Object.getOwnPropertyDescriptors(TraitConnection.prototype);\n    delete descriptors.constructor;\n    Object.defineProperties(proto, descriptors);\n    return Object.setPrototypeOf(client, proto);\n}\n"]}