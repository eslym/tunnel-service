{"version":3,"sources":["../src/extends.ts"],"names":[],"mappings":"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","file":"extends.js","sourcesContent":["import {Contracts} from \"./contracts\";\nimport {randomUUID} from \"crypto\";\nimport {AuthContext, Connection, ServerChannel} from \"ssh2\";\nimport {Console} from 'console';\nimport {Agent} from \"http\";\nimport {HttpAgent, HttpsAgent} from \"./agents\";\nimport {wait} from \"./utils\";\nimport {TimeoutError} from \"./errors\";\nimport Protocol = Contracts.Protocol;\n\ninterface PrivateProperties {\n    uuid: string,\n    bindings: Map<string, AgentProvider>,\n    user?: Contracts.User,\n    logging: boolean,\n    mainIO?: Console,\n    pendingLogs: string[],\n    weight: number,\n    activeRequests: number,\n    state: 'active' | 'pausing' | 'shutting-down',\n    authenticatedContext?: AuthContext,\n}\n\nconst privates = new WeakMap<Connection | TraitConnection, PrivateProperties>();\n\nexport type ClientConnection = Connection & TraitConnection;\n\nclass AgentProvider implements Contracts.AgentProvider {\n    readonly binding: string;\n    readonly client: ClientConnection;\n    readonly protocol: Contracts.Protocol;\n    readonly uuid: string;\n    readonly activeChannels: Set<ServerChannel>;\n    readonly timeout: number;\n\n    private _weight?: number;\n\n    get weight(): number {\n        if (this.hasOwnProperty('_weight')) {\n            return this._weight;\n        }\n        return this.client.weight;\n    }\n\n    set weight(weight: number) {\n        if (!Number.isNaN(weight) && Number.isFinite(weight) && weight > 0) {\n            this._weight = weight;\n        } else {\n            delete this._weight;\n        }\n    }\n\n    get port(): number {\n        return this.protocol === 'http' ? 80 : 443;\n    }\n\n    get activeRequests(): number {\n        return this.client.activeRequests;\n    }\n\n    set activeRequests(requests) {\n        this.client.activeRequests = requests;\n    }\n\n    get state(): 'active' | 'pausing' | 'shutting-down' {\n        return this.client.state;\n    }\n\n    getAgent(sourceIp: string, sourcePort: number): Promise<Agent> {\n        if (this.state !== 'active') {\n            return new Promise<Agent>((res, rej) => {\n                rej(new Error('This provider is not active.'));\n            });\n        }\n        return new Promise<Agent>((res, rej) => {\n            let before = new Date();\n            let to = setTimeout(() => {\n                rej(new TimeoutError());\n                to = undefined;\n            }, this.timeout);\n            this.client.forwardOut(this.binding, this.port, sourceIp, sourcePort, (err, ch) => {\n                if (!to) {\n                    // If already timeout close the channel\n                    if (!err) ch.close();\n                    return;\n                }\n                clearTimeout(to);\n                if (err) {\n                    return rej(err);\n                }\n                let diff = (new Date() as any) - (before as any);\n                let timeout = () => {\n                    ch.emit('error', new TimeoutError());\n                    ch.close();\n                };\n                to = setTimeout(timeout, this.timeout - diff);\n                this.activeChannels.add(ch);\n                ch.once('close', () => {\n                    this.activeChannels.delete(ch);\n                    clearTimeout(to);\n                });\n                ch.on('data', () => {\n                    clearTimeout(to);\n                    to = setTimeout(timeout, this.timeout);\n                });\n                let claz = this.protocol === 'http' ? HttpAgent : HttpsAgent;\n                res(new claz(ch, this.client, this, {}));\n            });\n        });\n    }\n}\n\nabstract class TraitConnection implements Contracts.ClientConnection {\n    get uuid(): string {\n        return privates.get(this).uuid;\n    }\n\n    get agents(): Contracts.AgentProvider[] {\n        return Array.from(privates.get(this).bindings.values());\n    }\n\n    get user(): Contracts.User {\n        return privates.get(this).user;\n    }\n\n    get authenticatedContext(): AuthContext {\n        return privates.get(this).authenticatedContext;\n    }\n\n    set authenticatedContext(context) {\n        privates.get(this).authenticatedContext = context;\n    }\n\n    get bindings(): Map<string, AgentProvider> {\n        return privates.get(this).bindings;\n    }\n\n    get console(): Console {\n        return privates.get(this).mainIO;\n    }\n\n    set console(console: Console) {\n        let props = privates.get(this);\n        props.mainIO = console;\n        while (props.pendingLogs.length) {\n            console.log(props.pendingLogs.shift());\n        }\n    }\n\n    get weight() {\n        return privates.get(this).weight;\n    }\n\n    set weight(weight: number) {\n        privates.get(this).weight = weight;\n    }\n\n    get activeRequests() {\n        return privates.get(this).activeRequests;\n    }\n\n    set activeRequests(requests) {\n        privates.get(this).activeRequests = requests;\n    }\n\n    get state() {\n        return privates.get(this).state;\n    }\n\n    async pause() {\n        if (this.state !== 'active') {\n            return;\n        }\n        privates.get(this).state = 'pausing';\n        this.log('Pausing tunnel.', true).catch();\n        let count = 0;\n        while ((this.state as string) === 'pausing') {\n            if (this.activeRequests === 0 || count >= 100) {\n                break;\n            }\n            count++;\n            await wait(50);\n        }\n        if ((this.state as string) !== 'pausing') {\n            return;\n        }\n        for (let agent of this.bindings.values()) {\n            for (let ch of agent.activeChannels) {\n                ch.close();\n            }\n        }\n    }\n\n    resume() {\n        if (this.state !== 'pausing') {\n            return;\n        }\n        privates.get(this).state = 'active';\n        this.log('Tunnel resumed.', true).catch();\n    }\n\n    async shutdown() {\n        if (this.state === 'shutting-down') {\n            return;\n        }\n        privates.get(this).state = 'shutting-down';\n        this.log('Shutting down tunnel.', true).catch();\n        let count = 0;\n        while (true) {\n            if (this.activeRequests === 0 || count >= 100) {\n                break;\n            }\n            await wait(50);\n            count++;\n        }\n        (this as any as ClientConnection).end();\n    }\n\n    async log(message: string, force?: boolean): Promise<void> {\n        let props = privates.get(this);\n        if (this.console) {\n            if (force || props.logging) {\n                this.console.log(message);\n            }\n        } else {\n            if (force || props.logging) {\n                props.pendingLogs.push(message);\n            }\n        }\n    }\n\n    setLogging(enable: boolean) {\n        privates.get(this).logging = enable;\n    }\n\n    isBound(domain: string, protocol: Contracts.Protocol): boolean {\n        return !this.bindings.hasOwnProperty(domain) ? false :\n            this.bindings[domain].protocol === protocol;\n    }\n\n    setUser(user: Contracts.User): this {\n        privates.get(this).user = user;\n        return this;\n    }\n\n    createAgentProvider(binding: string, protocol: Protocol, timeout: number): AgentProvider {\n        return Object.assign(Object.create(AgentProvider.prototype), {\n            uuid: randomUUID(),\n            client: this,\n            binding, protocol,\n            activeRequests: 0,\n            activeChannels: new Set<ServerChannel>(),\n            timeout: timeout ?? 30000\n        });\n    }\n}\n\nexport function extendClient(client: Connection): ClientConnection {\n    let proto = Object.create(Object.getPrototypeOf(client));\n    privates.set(client, {\n        uuid: randomUUID(),\n        bindings: new Map<string, AgentProvider>(),\n        logging: false,\n        weight: 1,\n        pendingLogs: [],\n        activeRequests: 0,\n        state: 'active',\n    });\n    let descriptors = Object.getOwnPropertyDescriptors(TraitConnection.prototype);\n    delete descriptors.constructor;\n    Object.defineProperties(proto, descriptors);\n    return Object.setPrototypeOf(client, proto);\n}\n"]}