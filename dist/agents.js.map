{"version":3,"sources":["../src/agents.ts"],"names":[],"mappings":";AAAA,qCAAqC;;;;;;;;;;;;;;;AAErC,+BAAyC;AAGzC,+BAA+B;AAC/B,2BAA2B;AAE3B,SAAS,OAAO,KAAG,CAAC;AAMpB,iBAAiB;AAEjB,MAAa,SAAU,SAAQ,YAAK;IAIhC,YAAY,OAAsB,EAAE,MAAwB,EAAE,IAAiB,EAAE,OAAqB;QAClG,KAAK,CAAC,OAAO,CAAC,CAAC;QAJnB,qCAAiC;QACjC,oCAAmC;QACnC,kCAA4B;QAGxB,uBAAA,IAAI,sBAAY,OAAO,MAAA,CAAC;QACxB,uBAAA,IAAI,qBAAW,MAAM,MAAA,CAAC;QACtB,uBAAA,IAAI,mBAAS,IAAI,MAAA,CAAC;IACtB,CAAC;IAEM,gBAAgB,CAAC,OAAqB,EAAE,QAA6B;QACxE,uBAAA,IAAI,uBAAM,CAAC,cAAc,EAAG,CAAC;QAC5B,uBAAA,IAAI,0BAAiB,CAAC,YAAY,GAAG,OAAO,CAAC;QAC7C,uBAAA,IAAI,0BAAiB,CAAC,UAAU,GAAG,OAAO,CAAC;QAC3C,uBAAA,IAAI,0BAAiB,CAAC,UAAU,GAAG,OAAO,CAAC;QAC3C,uBAAA,IAAI,0BAAiB,CAAC,GAAG,GAAG,OAAO,CAAC;QACpC,uBAAA,IAAI,0BAAiB,CAAC,KAAK,GAAG,OAAO,CAAC;QACtC,uBAAA,IAAI,0BAAiB,CAAC,WAAW,GAAG,uBAAA,IAAI,0BAAS,CAAC,OAAO,CAAC;QAC3D,uBAAA,IAAI,0BAAS,CAAC,EAAE,CAAC,OAAO,EAAE,GAAE,EAAE,CAAA,uBAAA,IAAI,uBAAM,CAAC,cAAc,EAAE,CAAC,CAAC;QAC3D,QAAQ,CAAC,IAAI,EAAE,uBAAA,IAAI,0BAAS,CAAC,CAAC;IAClC,CAAC;CACJ;AAtBD,8BAsBC;;AAED,MAAa,UAAW,SAAQ,KAAK,CAAC,KAAK;IAIvC,YAAY,OAAsB,EAAE,MAAwB,EAAE,IAAiB,EAAE,OAAqB;QAClG,KAAK,CAAC,OAAO,CAAC,CAAC;QAJnB,sCAAiC;QACjC,qCAAmC;QACnC,mCAA4B;QAGxB,uBAAA,IAAI,uBAAY,OAAO,MAAA,CAAC;QACxB,uBAAA,IAAI,sBAAW,MAAM,MAAA,CAAC;QACtB,uBAAA,IAAI,oBAAS,IAAI,MAAA,CAAC;IACtB,CAAC;IAEM,gBAAgB,CAAC,OAAqB,EAAE,QAA6B;QACvE,OAAe,CAAC,MAAM,GAAG,uBAAA,IAAI,2BAAS,CAAC;QACxC,IAAI,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACnC,MAAM,OAAO,GAAG,CAAC,GAAG,EAAE;YAClB,IAAI,MAAM,GAAG,KAAK,CAAC;YACnB,OAAO,GAAG,EAAE;gBACR,IAAI,MAAM;oBACN,OAAO;gBACX,MAAM,GAAG,IAAI,CAAC;gBACd,IAAI,uBAAA,IAAI,2BAAS,CAAC,QAAQ,EAAE;oBACxB,uBAAA,IAAI,2BAAS,CAAC,MAAM,EAAE,CAAC;YAC/B,CAAC,CAAC;QACN,CAAC,CAAC,EAAE,CAAC;QACL,4EAA4E;QAC5E,wCAAwC;QACxC,OAAO,CAAC,EAAE,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAChD,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC5B,CAAC;CACJ;AA7BD,gCA6BC","file":"agents.js","sourcesContent":["// noinspection JSUnusedGlobalSymbols\n\nimport {Agent, AgentOptions} from \"http\";\nimport {ServerChannel} from \"ssh2\";\nimport {ClientConnection} from \"./extends\";\nimport * as https from \"https\";\nimport * as tls from \"tls\";\n\nfunction nothing(){}\n\ninterface BindingInfo {\n    activeRequests: number;\n}\n\n// code from ssh2\n\nexport class HttpAgent extends Agent{\n    readonly #channel: ServerChannel;\n    readonly #client: ClientConnection;\n    readonly #info: BindingInfo;\n    constructor(channel: ServerChannel, client: ClientConnection, info: BindingInfo, options: AgentOptions) {\n        super(options);\n        this.#channel = channel;\n        this.#client = client;\n        this.#info = info;\n    }\n\n    public createConnection(options: AgentOptions, callback: (err, stream)=>void){\n        this.#info.activeRequests ++;\n        (this.#channel as any).setKeepAlive = nothing;\n        (this.#channel as any).setNoDelay = nothing;\n        (this.#channel as any).setTimeout = nothing;\n        (this.#channel as any).ref = nothing;\n        (this.#channel as any).unref = nothing;\n        (this.#channel as any).destroySoon = this.#channel.destroy;\n        this.#channel.on('close', ()=>this.#info.activeRequests--);\n        callback(null, this.#channel);\n    }\n}\n\nexport class HttpsAgent extends https.Agent {\n    readonly #channel: ServerChannel;\n    readonly #client: ClientConnection;\n    readonly #info: BindingInfo;\n    constructor(channel: ServerChannel, client: ClientConnection, info: BindingInfo, options: AgentOptions) {\n        super(options);\n        this.#channel = channel;\n        this.#client = client;\n        this.#info = info;\n    }\n\n    public createConnection(options: AgentOptions, callback: (err, stream)=>void){\n        (options as any).socket = this.#channel;\n        let wrapped = tls.connect(options);\n        const onClose = (() => {\n            let called = false;\n            return () => {\n                if (called)\n                    return;\n                called = true;\n                if (this.#channel.isPaused())\n                    this.#channel.resume();\n            };\n        })();\n        // 'end' listener is needed because 'close' is not emitted in some scenarios\n        // in node v12.x for some unknown reason\n        wrapped.on('end', onClose).on('close', onClose);\n        callback(null, wrapped);\n    }\n}\n"]}