{"version":3,"sources":["../src/commands.ts"],"names":[],"mappings":"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","file":"commands.js","sourcesContent":["/**\n * Server Commands\n */\n\nimport * as yargs from \"yargs\";\nimport {ArgumentsCamelCase, Argv} from \"yargs\";\nimport {Console} from \"console\";\nimport {ClientConnection} from \"./extends\";\n\nexport interface ServerContext {\n    client: ClientConnection\n    console: Console;\n}\n\nexport interface SetWeightOptions {\n    weight: number;\n    domain: string[];\n}\n\n// This is the only way to keep multiple instance of yargs for different purpose\nexport const commands = (new (yargs as any)() as Argv).scriptName(\"\")\n    .command('nolog', 'Turn off log for the client', {}, (argv: ArgumentsCamelCase<ServerContext>) => {\n        argv.client.setLogging(false);\n        argv.console.log(`Client logging disabled.`);\n    })\n    .command('log', 'Turn on log for the client', {}, (argv: ArgumentsCamelCase<ServerContext>) => {\n        argv.client.setLogging(true);\n        argv.console.log(`Client logging enabled.`);\n    })\n    .command('ls', 'List the bindings', {}, (argv: ArgumentsCamelCase<ServerContext>) => {\n        for(let pair of argv.client.bindings.entries()){\n            argv.console.log(`${pair[0]}: ${pair[1].uuid}`);\n        }\n    })\n    .command('set-weight <weight>', 'Set the weight for load balancing', (cmd) => {\n        cmd.positional('weight', {\n            describe: 'The weight for the connected client',\n            type: \"number\",\n        }).option('domain', {\n            describe: 'The set the weight for specific binding, set the global weight if no specify any',\n            alias: ['d'],\n            array: true,\n            type: 'string',\n        });\n    }, ((argv: ArgumentsCamelCase<ServerContext & SetWeightOptions>)=>{\n        if(Array.isArray(argv.domain) && argv.domain.length > 0){\n            for (let domain of argv.domain){\n                if(argv.client.bindings.has(domain)){\n                    let provider = argv.client.bindings.get(domain);\n                    provider.weight = argv.weight;\n                    argv.console.log(`The weight for binding \"${domain}\" set to ${provider.weight}`);\n                } else {\n                    argv.console.warn(`This client is not bounded to ${domain}`);\n                }\n            }\n        } else {\n            if(!Number.isNaN(argv.weight) && Number.isFinite(argv.weight) && argv.weight > 0){\n                argv.client.weight = argv.weight;\n                argv.console.log(`Client weight set to ${argv.weight}`);\n            } else {\n                argv.console.error(`Invalid weight`);\n            }\n        }\n    }))\n    .demandCommand()\n    .strict()\n    .strictCommands()\n    .help();"]}