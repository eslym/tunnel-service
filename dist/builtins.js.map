{"version":3,"sources":["../src/builtins.ts"],"names":[],"mappings":"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","file":"builtins.js","sourcesContent":["import {Contracts} from \"./contracts\";\nimport {EventEmitter} from \"events\";\nimport * as path from \"path\";\nimport * as fs from \"fs\";\nimport {PublicKeyAuthContext, utils} from \"ssh2\";\nimport {ParsedKey} from \"ssh2-streams\";\nimport {timingSafeEqual} from \"crypto\";\nimport {DomainMapping} from \"./utils\";\nimport {Request, Response} from \"express\";\nimport * as util from \"util\";\nimport * as https from \"https\";\nimport {IncomingMessage} from \"http\";\nimport JSON5 = require('json5');\nimport YAML = require('yaml');\nimport bcrypt = require('bcrypt');\nimport UserProvider = Contracts.UserProvider;\nimport User = Contracts.User;\nimport Dict = NodeJS.Dict;\nimport parseKey = utils.parseKey;\nimport Protocol = Contracts.Protocol;\nimport AgentProvider = Contracts.AgentProvider;\nimport AgentPool = Contracts.AgentPool;\nimport ErrorResponseHandler = Contracts.ErrorResponseHandler;\n\nconst ConfigLoader: Dict<(path: string) => Promise<UserConfig>> = {};\n\nasync function yamlLoader(path: string) {\n    let buff = (await util.promisify(fs.readFile)(path)).toString();\n    return YAML.parse(buff);\n}\n\nasync function jsonLoader(path: string) {\n    let buff = (await util.promisify(fs.readFile)(path)).toString();\n    return JSON.parse(buff);\n}\n\nasync function json5Loader(path: string) {\n    let buff = (await util.promisify(fs.readFile)(path)).toString();\n    return JSON5.parse(buff);\n}\n\nConfigLoader['.yml'] = ConfigLoader['.yaml'] = yamlLoader;\nConfigLoader['.json'] = jsonLoader;\nConfigLoader['.json5'] = json5Loader;\n\n// Code from ssh2 example\nfunction checkValue(input, allowed) {\n    const autoReject = (input.length !== allowed.length);\n    if (autoReject) {\n        // Prevent leaking length information by always making a comparison with the\n        // same input when lengths don't match what we expect ...\n        allowed = input;\n    }\n    const isMatch = timingSafeEqual(input, allowed);\n    return (!autoReject && isMatch);\n}\n\nfunction authKey(context: PublicKeyAuthContext, key: ParsedKey) {\n    return context.key.algo === key.type &&\n        checkValue(context.key.data, key.getPublicSSH()) &&\n        (!context.signature || key.verify(context.blob, context.signature) === true);\n}\n\ninterface UserConfig {\n    keys?: string[],\n    domains: string[],\n    password?: string,\n}\n\nexport class FileUserProvider extends EventEmitter implements UserProvider {\n    readonly #directory: string;\n\n    constructor(directory: string) {\n        super();\n        this.#directory = path.resolve(directory);\n    }\n\n    async findUser(username: string, client: Contracts.ClientConnection): Promise<Contracts.User | false> {\n        for (let ext of Object.keys(ConfigLoader)) {\n            let file = path.join(this.#directory, `${username}${ext}`);\n            if (!fs.existsSync(file)) {\n                continue;\n            }\n            try {\n                await ConfigLoader[ext](file);\n                return new FileUser(username, file);\n            } catch (e) {\n            }\n        }\n        return undefined;\n    }\n}\n\nclass FileUser implements User {\n    readonly username: string;\n    readonly #configPath: string;\n\n    constructor(username: string, configPath: string) {\n        this.username = username;\n        this.#configPath = configPath;\n    }\n\n    async authKey(context: PublicKeyAuthContext): Promise<boolean> {\n        let config = await this.loadConfig();\n        if (!config.hasOwnProperty('keys')) {\n            return false;\n        }\n        for (let key of config.keys) {\n            let parsed = parseKey(key);\n            if (parsed instanceof Error) {\n                continue;\n            }\n            if (!Array.isArray(parsed)) {\n                parsed = [parsed];\n            }\n            if (parsed.some(k => authKey(context, k))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    authPassword(password: string): Promise<boolean> {\n        return this.loadConfig().then((config) => {\n            if (!config.hasOwnProperty('password')) {\n                return false;\n            }\n            return bcrypt.compare(password, config.password);\n        });\n    }\n\n    async canBind(domain: string, protocol: Protocol): Promise<boolean> {\n        let config = await this.loadConfig();\n        let validator = new DomainMapping<true>();\n        for (let pattern of config.domains) {\n            validator.addByPattern(pattern, true);\n        }\n        return validator.resolve(domain).found;\n    }\n\n    async loadConfig(): Promise<UserConfig> {\n        let ext = path.extname(this.#configPath);\n        let config = await ConfigLoader[ext](this.#configPath);\n        if (!config.hasOwnProperty('domains')) {\n            throw new Error('User domains is required')\n        }\n        if (!Array.isArray(config.domains) || config.domains.some(d => typeof d !== 'string')) {\n            throw new Error('User domains must be an array of string');\n        }\n        if (!config.hasOwnProperty('password') && !config.hasOwnProperty('keys')) {\n            throw new Error(\"User doesn't have any authentication method\");\n        }\n        if (config.hasOwnProperty('password') && typeof config.password !== 'string') {\n            throw new Error('Password signature must be a string');\n        }\n        if (\n            config.hasOwnProperty('keys') &&\n            (\n                !Array.isArray(config.keys) ||\n                config.keys.some(k => typeof k !== 'string')\n            )\n        ) {\n            if (!Array.isArray(config.keys)) {\n                throw new Error('Public keys must be an array of string')\n            }\n        }\n        return config;\n    }\n}\n\ntype SelectorFunction = (agents: AgentProvider[]) => AgentProvider | undefined;\n\nexport class DefaultAgentPool implements AgentPool {\n    readonly #agentSelector: SelectorFunction;\n    #agentIndex: Map<string, Map<string, AgentProvider>>\n    #domains: DomainMapping<Map<string, AgentProvider>>;\n\n    constructor(selector: SelectorFunction) {\n        this.#agentSelector = selector;\n        this.#agentIndex = new Map<string, Map<string, Contracts.AgentProvider>>();\n        this.#domains = new DomainMapping<Map<string, Contracts.AgentProvider>>();\n    }\n\n    attach(agent: Contracts.AgentProvider): void {\n        if (!this.#domains.hasPattern(agent.binding)) {\n            let map = new Map<string, AgentProvider>();\n            map.set(agent.uuid, agent);\n            this.#agentIndex.set(agent.uuid, map);\n            this.#domains.addByPattern(agent.binding, map);\n            return;\n        }\n        let map = this.#domains.getByPattern(agent.binding);\n        map.set(agent.uuid, agent);\n        this.#agentIndex.set(agent.uuid, map);\n    }\n\n    detach(agent: Contracts.AgentProvider): void {\n        let map = this.#agentIndex.get(agent.uuid);\n        map.delete(agent.uuid);\n        let p = this.#domains.getByPattern(agent.binding);\n        if (p && p.size === 0) {\n            this.#domains.removePattern(agent.binding);\n        }\n    }\n\n    detachAll(client: Contracts.ClientConnection): void {\n        for (let agent of client.agents) {\n            this.detach(agent);\n        }\n    }\n\n    isAvailable(domain: string): boolean {\n        let result = this.#domains.resolve(domain);\n        let sample = Array.from(result.value.values())\n            .filter(p => p.state === 'active');\n        return result.found && sample.length > 0;\n    }\n\n    select(domain: string): AgentProvider | false {\n        let result = this.#domains.resolve(domain);\n        if (!result.found) {\n            return false;\n        }\n        let sample = Array.from(result.value.values())\n            .filter(p => p.state === 'active');\n        return this.#agentSelector(sample);\n    }\n}\n\nexport class TextPlainErrorResponseHandler implements ErrorResponseHandler {\n    badGateway(request: Request, response: Response): Contracts.AsyncResult<void> {\n        response.status(502)\n            .header('Content-Type', 'text/plain')\n            .send('502 Bad Gateway');\n    }\n\n    serviceUnavailable(request: Request, response: Response): Contracts.AsyncResult<void> {\n        response.status(503)\n            .header('Content-Type', 'text/plain')\n            .send('503 Service Unavailable');\n    }\n\n    gatewayTimeout(request: Request, response: Response): Contracts.AsyncResult<void> {\n        response.status(504)\n            .header('Content-Type', 'text/plain')\n            .send('504 Gateway Timeout');\n    }\n}\n\nexport class HttpCatsErrorResponseHandler implements ErrorResponseHandler {\n    handle(status: number) {\n        return new Promise<IncomingMessage>((resolve, reject) => {\n            https.request({\n                method: 'get',\n                path: `/${status}`,\n                host: 'http.cat',\n            })\n                .on('response', (res) => {\n                    resolve(res);\n                })\n                .once('error', reject)\n                .end();\n        });\n    }\n\n    badGateway(request: Request, response: Response): Promise<void> {\n        return this.handle(502).then((incoming) => {\n            response.status(502)\n                .header('connection', 'close')\n                .header('content-type', incoming.headers['content-type'])\n                .header('content-length', incoming.headers['content-length'])\n                .header('content-disposition', `inline; filename=\"502 Bad Gateway.jpg\"`);\n            incoming.pipe(response);\n        });\n    }\n\n    gatewayTimeout(request: Request, response: Response): Promise<void> {\n        return this.handle(504).then((incoming) => {\n            response.status(504)\n                .header('connection', 'close')\n                .header('content-type', incoming.headers['content-type'])\n                .header('content-length', incoming.headers['content-length'])\n                .header('content-disposition', `inline; filename=\"504 Gateway Timeout.jpg\"`);\n            incoming.pipe(response);\n        });\n    }\n\n    serviceUnavailable(request: Request, response: Response): Promise<void> {\n        return this.handle(503).then((incoming) => {\n            response.status(503)\n                .header('connection', 'close')\n                .header('content-type', incoming.headers['content-type'])\n                .header('content-length', incoming.headers['content-length'])\n                .header('content-disposition', `inline; filename=\"503 Service Unavailable.jpg\"`);\n            incoming.pipe(response);\n        });\n    }\n}\n"]}