{"version":3,"sources":["../src/service.ts"],"names":[],"mappings":"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","file":"service.js","sourcesContent":["import {EncryptedPrivateKey, Server} from \"ssh2\";\nimport {Buffer} from \"buffer\";\nimport {Contracts} from \"./contracts\";\nimport {Express, NextFunction, Request, Response, Router} from \"express\";\nimport {SafeWrapped} from \"./wrapper\";\nimport {ServerOptions as ProxyOption} from \"http-proxy\";\nimport {ClientConnection, extendClient} from \"./extends\";\nimport * as http from \"http\";\nimport {Console} from \"console\";\nimport * as readline from \"readline\";\nimport {commands} from \"./commands\";\nimport {createResponse, mockSocket, promise} from \"./utils\";\nimport * as net from \"net\";\nimport {logger, Logger} from \"@eslym/logger\";\nimport {TimeoutError} from \"./errors\";\nimport express = require('express');\nimport HttpProxy = require('http-proxy');\nimport ip = require('ip');\nimport finalhandler = require(\"finalhandler\");\nimport UserProvider = Contracts.UserProvider;\nimport AgentPool = Contracts.AgentPool;\nimport AgentProvider = Contracts.AgentProvider;\nimport ErrorResponseHandler = Contracts.ErrorResponseHandler;\nimport Protocol = Contracts.Protocol;\nimport Guard = Contracts.Guard;\n\nexport interface LaunchOption {\n    httpPort: number;\n    sshPort: number;\n    serverKey: Buffer | string | EncryptedPrivateKey;\n    userProvider: UserProvider;\n    agentPool: AgentPool;\n    errorResHandler: ErrorResponseHandler;\n    trustedProxy?: string | false;\n    proxyTimeout?: number;\n    logger?: Logger;\n}\n\nexport class TunnelService {\n    readonly #sshServer: Server;\n    readonly #httpServer: http.Server;\n    readonly #express: Express;\n    readonly #apiRoutes: Router;\n    readonly #guards: Set<Contracts.Guard>;\n    #httpProxy: HttpProxy;\n    #option: LaunchOption;\n    #userClients: Map<string, Set<ClientConnection>>;\n\n    constructor(option: LaunchOption) {\n        this.#userClients = new Map<string, Set<ClientConnection>>();\n        this.#guards = new Set<Contracts.Guard>();\n        this.#option = Object.create(option);\n        this.#option.userProvider = SafeWrapped.UserProvider.wrap(option.userProvider);\n        this.#option.agentPool = SafeWrapped.AgentPool.wrap(option.agentPool);\n        this.#option.errorResHandler = SafeWrapped.ErrorResponseHandler.wrap(option.errorResHandler);\n        if (!this.#option.logger) {\n            this.#option.logger = logger;\n        }\n        this.#httpProxy = new HttpProxy();\n        this.#apiRoutes = Router();\n        this.#sshServer = this.#setupSSH();\n        this.#express = this.#setupExpress();\n        this.#httpServer = new http.Server(this.#express);\n        this.#httpServer.on('upgrade', (req: Request, socket, head) => {\n            socket.on('error', (err) => {\n                this.#option.logger.error(`Error on outgoing response, ${err.message}`);\n            });\n            Object.setPrototypeOf(req, Object.create(this.#express.request));\n            let response = createResponse(req, this.#express.response, mockSocket(socket));\n            let write = socket._write;\n            // TODO: Handle the websocket error more properly, might need to make own proxy\n            Object.defineProperty(response, 'headerSent', {\n                get() {\n                    return socket._write === write;\n                }\n            })\n            socket._write = (...args) => {\n                socket._write = write;\n                return write.apply(socket, args);\n            }\n            let next = (err?: any) => {\n                finalhandler(req, response, {\n                    env: this.#express.get('env')\n                })(err);\n            }\n            return this.#handleRequest(req, response, next, (options, onError) => {\n                this.#httpProxy.ws(req, socket, head, options, onError);\n            });\n        }).on('listening', () => {\n            let addr = this.#httpServer.address() as any;\n            this.#option.logger.info(`HTTP Server Listening on ${addr.port}`);\n        });\n    }\n\n    get apiRoutes() {\n        return this.#apiRoutes;\n    }\n\n    get express() {\n        return this.#express;\n    }\n\n    get sshServer() {\n        return this.#sshServer;\n    }\n\n    get httpServer() {\n        return this.#httpServer;\n    }\n\n    get guards() {\n        return this.#guards;\n    }\n\n    static async #proxyOptions(req: Request, agent: AgentProvider): Promise<ProxyOption> {\n        let hostPort = req.headers.host.split(':');\n        let port = hostPort.length >= 2 ? hostPort[1] : (req.secure ? '443' : '80');\n        return {\n            target: `${agent.protocol}://${req.hostname}:${port}`,\n            headers: {\n                'X-Forwarded-For': req.ip,\n                'X-Forwarded-Host': req.hostname,\n                // X-Forwarded-Proto should only use http and https,\n                // see https://github.com/traefik/traefik/issues/6388\n                'X-Forwarded-Proto': req.secure ? 'https' : 'http',\n                'X-Forwarded-Port': port,\n            },\n            agent: await agent.getAgent(req.socket.remoteAddress, req.socket.remotePort),\n            proxyTimeout: undefined,\n        }\n    }\n\n    start() {\n        this.#option.userProvider.on('user-deactivated', async (username) => {\n            if (this.#userClients.has(username)) {\n                let clients = this.#userClients.get(username);\n                for (let client of clients) {\n                    await this.#option.agentPool.detachAll(client);\n                    client.end();\n                }\n            }\n        });\n        this.#httpServer.listen(this.#option.httpPort);\n        this.#sshServer.listen(this.#option.sshPort);\n    }\n\n    #setupExpress() {\n        let app = express();\n\n        app.disable('x-powered-by');\n\n        app.set('trust proxy', this.#option.trustedProxy);\n\n        app.use((req, res, next) => {\n            return this.#handleRequest(req, res, next, (options, onError) => {\n                this.#httpProxy.web(req, res, options, onError);\n            });\n        });\n\n        this.#apiRoutes.get('/caddy-on-demand-tls', (req, res) => {\n            let fail = () => {\n                res.status(403)\n                    .header('Content-Type', 'text/plain')\n                    .send('403 Forbidden');\n            }\n            if (typeof req.query.domain !== 'string') {\n                return fail();\n            }\n            if (!this.#option.agentPool.isAvailable(req.query.domain)) {\n                return fail();\n            }\n            res.status(200)\n                .header('Content-Type', 'text/plain')\n                .send('200 OK');\n        });\n\n        return app;\n    }\n\n    #setupSSH(): Server {\n        return new Server({\n            hostKeys: [this.#option.serverKey],\n        }, (connection) => {\n            let client = extendClient(connection);\n            this.#option.logger.log(`Client ${client.uuid} connected.`);\n            let dropClient = () => {\n                this.#option.agentPool.detachAll(client);\n                this.#option.logger.log(`${client.uuid} disconnected.`);\n                if(client.user && this.#userClients.has(client.user.username))\n                    this.#userClients.get(client.user.username).delete(client);\n                for (let agent of client.bindings.values()) {\n                    for (let ch of agent.activeChannels) {\n                        ch.close();\n                    }\n                }\n            };\n            client.on('authentication', async (context) => {\n                let user = await promise(this.#option.userProvider.findUser(context.username, client))\n                    .catch(e => this.#option.logger.error(e));\n                if (!user) {\n                    return context.reject();\n                }\n                let authenticated = false;\n                switch (context.method) {\n                    case \"password\":\n                        authenticated = await user.authPassword(context.password);\n                        break;\n                    case \"publickey\":\n                        authenticated = await user.authKey(context);\n                        break;\n                }\n                if (authenticated) {\n                    this.#option.logger.log(`${client.uuid} authenticated as ${context.username} using ${context.method}`);\n                    client.setUser(SafeWrapped.User.wrap(user));\n                    client.authenticatedContext = context;\n                    if (!this.#userClients.has(user.username)) {\n                        this.#userClients.set(user.username, new Set<ClientConnection>());\n                    }\n                    this.#userClients.get(user.username).add(client);\n                    return context.accept();\n                }\n                context.reject();\n            }).on('request', async (accept, reject, type, info) => {\n                try {\n                    switch (type) {\n                        case \"tcpip-forward\":\n                            this.#option.logger.log(`${client.uuid} trying to bind ${info.bindAddr}`);\n                            if (client.bindings.has(info.bindAddr)) {\n                                client.log(`Client already bounded to ${info.bindAddr}`, true).catch();\n                                return reject();\n                            }\n                            if (![80, 443].includes(info.bindPort)) {\n                                client.log(`Only port 80 and 443 are allowed.`, true).catch();\n                                return reject();\n                            }\n                            let protocol: Protocol = info.bindPort === 80 ? 'http' : 'https';\n                            if (!await client.user.canBind(info.bindAddr, protocol)) {\n                                client.log(`The current user is not allowed to bind to ${info.bindAddr}:${info.bindPort}`, true).catch();\n                                return reject();\n                            }\n                            let provider = client.createAgentProvider(info.bindAddr, protocol, this.#option.proxyTimeout);\n                            return promise(this.#option.agentPool.attach(provider))\n                                .then(() => {\n                                    client.log(`Bounded to ${info.bindAddr}:${info.bindPort}`, true).catch();\n                                    client.bindings.set(info.bindAddr, provider);\n                                    this.#option.logger.log(`${client.uuid} bounded to ${info.bindAddr}`);\n                                    return accept();\n                                })\n                                .catch((e) => {\n                                    client.log(`Unable to bind to ${info.bindAddr}:${info.bindPort}`, true).catch();\n                                    this.#option.logger.error(e);\n                                    reject();\n                                });\n                        case \"cancel-tcpip-forward\":\n                            if (client.bindings.has(info.bindAddr)) {\n                                let provider = client.bindings.get(info.bindAddr);\n                                let port = provider.protocol === 'http' ? 80 : 443;\n                                if (port !== info.bindPort) {\n                                    client.log(`The current client is not bounded to ${info.bindAddr}:${info.bindPort}`, true).catch();\n                                    return reject();\n                                }\n                                this.#option.agentPool.detach(provider);\n                                client.log(`Unbound from ${info.bindAddr}:${info.bindPort}`, true).catch();\n                                return accept();\n                            }\n                            client.log(`The current client is not bounded to ${info.bindAddr}:${info.bindPort}`, true).catch();\n                            return reject();\n                    }\n                    reject();\n                } catch (e) {\n                    reject();\n                }\n            }).on('session', ((accept) => {\n                let session = accept();\n                session.on('exec', (accept, reject, info) => {\n                    let channel = accept();\n                    let con = new Console(channel.stdout, channel.stderr);\n                    let mainSession = false;\n                    if (!client.console) {\n                        client.console = con;\n                        channel.on('close', () => {\n                            client.end();\n                        });\n                        mainSession = true;\n                    }\n                    commands.parse(info.command, {client, console: con}, (err, argv, output) => {\n                        if (output.length) {\n                            con.error(output);\n                        }\n                        if (!mainSession) {\n                            channel.exit(0);\n                            channel.end();\n                        }\n                    });\n                }).on('shell', (accept) => {\n                    let channel = accept();\n                    let con = new Console(channel.stdout, channel.stderr);\n                    if (!client.console) {\n                        client.console = con;\n                        channel.on('close', () => {\n                            client.end();\n                        });\n                    }\n                    let rl = readline.createInterface(channel.stdin, channel.stdout);\n                    rl.on('line', (line) => {\n                        rl.pause();\n                        commands.parse(line, {client, console: con}, (err, argv, output) => {\n                            if (output !== '') {\n                                con.error(output);\n                            }\n                            rl.resume();\n                        });\n                    });\n                });\n            })).on('close', dropClient)\n                .on('error', (err: Error) => {\n                    logger.error(`Client error: ${err.message}`);\n                    dropClient();\n                })\n        }).on('listening', () => {\n            let addr = this.#sshServer.address();\n            this.#option.logger.info(`SSH Server Listening on ${addr.port}`);\n        });\n    }\n\n    #handleRequest(\n        request: Request,\n        response: Response,\n        next: NextFunction,\n        callback: (options: ProxyOption, onError: (error?: Error) => unknown) => unknown\n    ) {\n        try {\n            // Check is the hostname is ip address\n            if (net.isIP(request.hostname)) {\n                if (ip.isEqual(request.hostname, request.socket.localAddress)) {\n                    // if the hostname is not faked using host header\n                    this.#apiRoutes(request, response, next);\n                } else {\n                    response.status(403)\n                        .header('Content-Type', 'text/plain')\n                        .send('403 Forbidden');\n                }\n                return;\n            }\n        } catch (e) {\n        }\n        let guards = this.#guards[Symbol.iterator]();\n        let current;\n        let nextFunc = async (error?: any) => {\n            if (error) next(error);\n            current = guards.next();\n            if (!current.done) {\n                return (current.value as Guard)(request, response, nextFunc);\n            }\n            let agent = await this.#option.agentPool.select(request.hostname);\n            if (!agent) {\n                return this.#option.errorResHandler.serviceUnavailable(request, response);\n            }\n            try {\n                let options = await TunnelService.#proxyOptions(request, agent);\n                callback(options, (err) => {\n                    if (!response.headersSent) {\n                        if (err instanceof TimeoutError) {\n                            return this.#option.errorResHandler.gatewayTimeout(request, response);\n                        }\n                        this.#option.errorResHandler.badGateway(request, response);\n                    }\n                });\n            } catch (e) {\n                return this.#option.errorResHandler.badGateway(request, response);\n            }\n        }\n        nextFunc().catch(next);\n    }\n}\n"]}